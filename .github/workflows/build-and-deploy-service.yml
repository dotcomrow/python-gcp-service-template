name: Build and Deploy Services

on:
  push:
    branches:
      - master

permissions: write-all

jobs:
  deploy:
    env:
        TF_CLOUD_ORGANIZATION: ${{ vars.TF_ORGANIZATION }}
        TF_API_TOKEN: ${{ secrets.TFE_TOKEN }}
    name: "Build and Deploy"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Delete current release branch
        uses: dawidd6/action-delete-branch@v3
        with:
          github_token: ${{github.token}}
          branches: release

      - name: Create Release branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: release # The branch the action should deploy to.
          folder: . # The folder the action should deploy.

      - name: Checkout Release branch
        uses: actions/checkout@v3
        with:
          ref: release
          path: release

      - name: Get next version
        uses: reecetech/version-increment@2023.9.3
        id: version
        with:
          scheme: calver
          increment: patch

      - name: get repository name
        run: echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS_RAW }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1

      - name: Configure docker for GCP
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
            context: src/
            push: true
            tags: ${{ vars.REGISTRY_NAME }}/${{ vars.COMMON_PROJECT_ID }}/svc-${{ env.REPOSITORY_NAME }}:latest
            build-args: |
              HTTP_PORT=8080

      - name: Create release
        uses: "actions/github-script@v6"
        env:
          VERSION: ${{ steps.version.outputs.version }}
        with:
          github-token: "${{ github.token }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.VERSION,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.VERSION,
                target_commitish: 'release'
              });
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Create workspace
        id: create_workspace
        run: |
          cat > payload.json <<EOF
          {
            "data": {
              "attributes": {
                "name": "${{ github.event.repository.name }}",
                "auto-apply": "true"
              },
              "type": "workspaces"
            }
          }
          EOF
          curl \
          --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          --request POST \
          --data @payload.json \
          --output output.txt \
          https://app.terraform.io/api/v2/organizations/${{ vars.TF_ORGANIZATION }}/workspaces
          echo "workspace_id=$(cat output.txt | jq -r '.[].id')" >> $GITHUB_OUTPUT

      - name: Create workspace variables
        run: |
              cat > payload.json <<EOF
              {
                "data": {
                  "type":"vars",
                  "attributes": {
                    "key":"project_id",
                    "value":"${{ github.event.repository.name }}",
                    "description":"initialization key",
                    "category":"terraform",
                    "hcl":false,
                    "sensitive":true
                  },
                  "relationships": {
                    "workspace": {
                      "data": {
                        "id":"${{ steps.create_workspace.outputs.workspace_id }}",
                        "type":"workspaces"
                      }
                    }
                  }
                }
              }
              EOF
              curl \
              --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
              --header "Content-Type: application/vnd.api+json" \
              --request POST \
              --data @payload.json \
              https://app.terraform.io/api/v2/vars
  
              cat > payload.json <<EOF
              {
                "data": {
                  "type":"vars",
                  "attributes": {
                    "key":"project_name",
                    "value":"${{ github.event.repository.name }}",
                    "description":"project name",
                    "category":"terraform",
                    "hcl":false,
                    "sensitive":false
                  },
                  "relationships": {
                    "workspace": {
                      "data": {
                        "id":"${{ steps.create_workspace.outputs.workspace_id }}",
                        "type":"workspaces"
                      }
                    }
                  }
                }
              }
              EOF
              curl \
              --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
              --header "Content-Type: application/vnd.api+json" \
              --request POST \
              --data @payload.json \
              https://app.terraform.io/api/v2/vars


      - uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.1.1
        id: upload
        with:
              workspace: ${{ github.event.repository.name }}
              directory: release

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.1.1
        id: apply-run
        if: success() || failure()
        with:
          workspace: ${{ github.event.repository.name }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: false
        env:
          TF_VAR_init_key: "\"${{ github.sha }}\""
          TF_VAR_project_id: "\"${{ github.event.repository.name }}\""
          TF_VAR_project_name: "\"${{ github.event.repository.name }}\""

